import{ALL_WEB_NETWORK_NODES as t}from"../constants/ClientConstants.js";import s from"../grpc/GrpcServiceError.js";import r from"../grpc/GrpcStatus.js";import e from"../http/HttpError.js";import a from"../http/HttpStatus.js";import{SDK_NAME as o,SDK_VERSION as n}from"../version.js";import i,{encodeRequest as p,decodeUnaryResponse as d}from"./Channel.js";class c extends i{constructor(t){super(),this._address=t}close(){}_createUnaryClient(i){return async(c,l,h)=>{try{let m;if(this._address.startsWith("http://")||this._address.startsWith("https://"))m=this._address;else{m=!(this._address.includes("localhost")||this._address.includes("127.0.0.1"))?`https://${this._address}`:`http://${this._address}`}const u=await fetch(`${m}/proto.${i}/${c.name}`,{method:"POST",headers:{"content-type":"application/grpc-web+proto","x-user-agent":`${o}/${n}`,"x-grpc-web":"1"},body:p(l)});if(!u.ok){h(new e(a._fromValue(u.status)),null)}const f=u.headers.get("grpc-status"),_=u.headers.get("grpc-message");if(null!=f&&null!=_){const e=new s(r._fromValue(parseInt(f)),t?.[this._address]?.toString());e.message=_,h(e,null)}const g=await u.arrayBuffer();h(null,d(g))}catch(e){h(new s(r._fromValue(18),t?.[this._address]?.toString()),null)}}}}export{c as default};
//# sourceMappingURL=WebChannel.js.map
